node <- setClass("node",
slots = list(
name = "character"
))
test_node <- new("node")
View(test_node)
test_node <- new("node")
View(test_node)
node <- setClass("node",
representation(
slots = list(
name = "character"
)
)
prototype(
node <- setClass("node",
representation(
slots = list(
name = "character"
)
),
prototype(
name = "default_node_name"
)
)
node <- setClass("node",
representation(
name = "character"
),
prototype(
name = "default_node_name"
)
)
test_node <- new("node")
View(test_node)
node <- setClass("node",
representation(
name = "character"
),
prototype(
name = "default_node_name"
)
)
test_node <- new("node")
test_node@name
test_node <- new("node", name = "node1")
test_node@name
edge <- setClass("edge",
representation(
source_node = "node",
target_node = "node"
))
test_edge <- new("edge")
test_edge@source_node
test_edge@target_node
network <- setClass("network",
slots = list(
nodes = "list",
edges = "list"
)
)
setMethod("add_node",
"network",
function(object, node_name) {
object@nodes <- append(object@nodes, new("node", node_name))
}
)
# Definition
Node <- setClass("Node",
representation(
name = "character"
),
prototype(
name = "default_node_name"
)
)
# Setters
setGeneric("name", function(x) standardGeneric("name"))
setGeneric("name<-", function(x, value) standardGeneric("name<-"))
setMethod("name", "Node", function(x) x@name)
setMethod("name<-", "Node", function(x, value) {
x@name <- value
x
})
test_node <- new("Node")
name(test_node)
# Testing the getter
name(test_node)
# Testing the setter
name(test_node) <- "node1"
name(test_node)
?name(test_node)
# Definition
Node <- setClass("Node",
representation(
name = "character"
),
prototype(
name = "default_node_name"
)
)
# Generics
setGeneric("name", function(x) standardGeneric("name"))
setGeneric("name<-", function(x, value) standardGeneric("name<-"))
# Setter and Getter
setMethod("name", "Node", function(x) x@name)
setMethod("name<-", "Node", function(x, value) {
x@name <- value
x
})
# Creating a test node
test_node <- new("Node")
# Testing the getter
name(test_node)
# Testing the setter
name(test_node) <- "node1"
name(test_node)
# Creating a test edge
test_edge <- new("Edge", source_node = node1, target_node = node2)
# Creating two test nodes
node1 <- new("Node", name = "node1")
node2 <- new("Node", name = "node2")
# Creating a test edge
test_edge <- new("Edge", source_node = node1, target_node = node2)
Edge <- setClass("Edge",
representation(
source_node = "Node",
target_node = "Node"
))
# Generics
setGeneric("source_node", function(x) standardGeneric("source_node"))
setGeneric("target_node", function(x) standardGeneric("target_node"))
# Getters
setMethod("source_node", "Edge", function(x) x@source_node)
setMethod("target_node", "Edge", function(x) x@target_node)
# Setters
setMethod("source_node<-", "Edge", function(x, value) {
x@source_node <- value
x
})
# Generics
setGeneric("source_node", function(x) standardGeneric("source_node"))
setGeneric("target_node", function(x) standardGeneric("target_node"))
# Getters
setMethod("source_node", "Edge", function(x) x@source_node)
Edge <- setClass("Edge",
representation(
source_node = "Node",
target_node = "Node"
))
# Generics
setGeneric("source_node", function(x) standardGeneric("source_node"))
setGeneric("source_node<-", function(x, value) standardGeneric("source_node<-"))
setGeneric("target_node", function(x) standardGeneric("target_node"))
# Getters
setMethod("source_node", "Edge", function(x) x@source_node)
setMethod("target_node", "Edge", function(x) x@target_node)
# Setters
setMethod("source_node<-", "Edge", function(x, value) {
x@source_node <- value
x
})
setMethod("target_node<-", "Edge", function(x, value) {
x@target_node <- value
x
})
Edge <- setClass("Edge",
representation(
source_node = "Node",
target_node = "Node"
))
# Generics
setGeneric("source_node", function(x) standardGeneric("source_node"))
setGeneric("source_node<-", function(x, value) standardGeneric("source_node<-"))
setGeneric("target_node", function(x) standardGeneric("target_node"))
setGeneric("target_node<-", function(x, value) standardGeneric("target_node<-"))
# Getters
setMethod("source_node", "Edge", function(x) x@source_node)
setMethod("target_node", "Edge", function(x) x@target_node)
# Setters
setMethod("source_node<-", "Edge", function(x, value) {
x@source_node <- value
x
})
setMethod("target_node<-", "Edge", function(x, value) {
x@target_node <- value
x
})
node1 <- new("Node", name = "node1")
node2 <- new("Node", name = "node2")
test_edge <- new("Edge", source_node = node1, target_node = node2)
source_node(test_edge)
target_node(test_edge)
# Testing the setters
source_node(test_node) <- "node3"
target_node(test_node) <- "node4"
# Testing the setters
source_node(test_node) <- node3
# Creating two test nodes
node1 <- new("Node", name = "node1")
node2 <- new("Node", name = "node2")
node3 <- new("Node", name = "node3")
node4 <- new("Node", name = "node4")
# Creating a test edge
test_edge <- new("Edge", source_node = node1, target_node = node2)
# Testing the getters
source_node(test_edge)
target_node(test_edge)
# Testing the setters
source_node(test_node) <- node3
# Creating two test nodes
node1 <- new("Node", name = "node1")
node2 <- new("Node", name = "node2")
node3 <- new("Node", name = "node3")
node4 <- new("Node", name = "node4")
# Creating a test edge
test_edge <- new("Edge", source_node = node1, target_node = node2)
# Testing the getters
source_node(test_edge)
target_node(test_edge)
# Testing the setters
source_node(test_edge) <- node3
target_node(test_edge) <- node4
source_node(test_edge)
target_node(test_edge)
Edge <- setClass("Edge",
representation(
source_node = "Node",
target_node = "Node"
))
# Generics
setGeneric("source_node", function(x) standardGeneric("source_node"))
setGeneric("source_node<-", function(x, value) standardGeneric("source_node<-"))
setGeneric("target_node", function(x) standardGeneric("target_node"))
setGeneric("target_node<-", function(x, value) standardGeneric("target_node<-"))
# Getters
setMethod("source_node", "Edge", function(x) x@source_node)
setMethod("target_node", "Edge", function(x) x@target_node)
# Setters
setMethod("source_node<-", "Edge", function(x, value) {
x@source_node <- value
x
})
setMethod("target_node<-", "Edge", function(x, value) {
x@target_node <- value
x
})
# Creating two test nodes
node1 <- new("Node", name = "node1")
node2 <- new("Node", name = "node2")
node3 <- new("Node", name = "node3")
node4 <- new("Node", name = "node4")
# Creating a test edge
test_edge <- new("Edge", source_node = node1, target_node = node2)
# Testing the getters
source_node(test_edge)
target_node(test_edge)
# Testing the setters
source_node(test_edge) <- node3
target_node(test_edge) <- node4
source_node(test_edge)
target_node(test_edge)
sloop::otype(node1)
type(edge1)
type(node1)
ftype(node1)
?node1
?source_node(test_edge)
?"?"
class(node1)
class(node1) == "Node"
nodes <- list(node1, node2, node3, node4, node5)
nodes <- list(node1, node2, node3, node4)
type(nodes)
clas(nodes)
class(nodes)
class(nodes[[1]])
type(node1)
network <- setClass("Network",
slots = list(
nodes = "list",
edges = "list"
),
validity = check_network
)
check_network <- function(object)
{
errors <- character()
for (i in 1:length(object@nodes))
{
if (class(object@nodes[[i]]) != "Node")
{
msg <- paste("Network contains an invalid node at index:", i)
errors <- c(errors, msg)
}
}
for (i in 1:length(object@edges))
{
if (class(object@edges[[i]]) != "Edge")
{
msg <- paste("Network contains an invalid edge at index: ", i)
errors <- c(errors, msg)
}
}
if (length(errors) == 0) TRUE else errors
}
network <- setClass("Network",
slots = list(
nodes = "list",
edges = "list"
),
validity = check_network
)
Network <- setClass("Network",
slots = list(
nodes = "list",
edges = "list"
),
validity = check_network
)
Network <- setClass("Network",
slots = list(
node_list = "list",
edge_list = "list"
),
validity = check_network
)
check_network <- function(object)
{
errors <- character()
for (i in 1:length(object@node_list))
{
if (class(object@node_list[[i]]) != "Node")
{
msg <- paste("Network contains an invalid node at index:", i)
errors <- c(errors, msg)
}
}
for (i in 1:length(object@edge_list))
{
if (class(object@edge_list[[i]]) != "Edge")
{
msg <- paste("Network contains an invalid edge at index: ", i)
errors <- c(errors, msg)
}
}
if (length(errors) == 0) TRUE else errors
}
SimpleNetwork <- setClass("SimpleNetwork",
slots = list(
node_list = "list",
edge_list = "list"
),
validity = check_network
)
test_network <- new("SimpleNetwork", node_list = list(node1, node2, node3, node4), edge_list = list(edge1))
# Creating two test nodes
node1 <- new("Node", name = "node1")
node2 <- new("Node", name = "node2")
node3 <- new("Node", name = "node3")
node4 <- new("Node", name = "node4")
# Creating a test edge
edge1 <- new("Edge", source_node = node1, target_node = node2)
# Testing the getters
source_node(edge1)
target_node(edge1)
# Testing the setters
source_node(edge1) <- node3
target_node(edge1) <- node4
source_node(edge1)
target_node(edge1)
test_network <- new("SimpleNetwork", node_list = list(node1, node2, node3, node4), edge_list = list(edge1))
bad_network <- new("SimpleNetwork", node_list = list(node1, node2, "bad_node", node4), edge_list = list(edge1, "bad_edge"))
